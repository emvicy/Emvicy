<?php

# List of Emvicy Standard Events
# @see https://mymvc.ueffing.net/3.4.x/events#EmvicyStandardEvents


\MVC\Event::processBindConfigStack([

    'mvc.db.model.db.create.before' => [
        /*
         * add timestamps if missing
         */
        function(MVC\DB\DataType\DB\TableDataType $oTableDataType) {
            (true === empty($oTableDataType->get_stampCreate())) ? $oTableDataType->set_stampCreate(date('Y-m-d H:i:s')) : false;
            (true === empty($oTableDataType->get_stampChange())) ? $oTableDataType->set_stampChange(date('Y-m-d H:i:s')) : false;
        },
    ],
    'mvc.db.model.db.update.before' => [
        /*
         * set stampChange to current datetime
         */
        function(\MVC\ArrDot $oSetWhere) {
            /** @var \MVC\DataType\DTDBSet $oDTDBSet */
            foreach ($oSetWhere->get('aDTDBSet') as $oDTDBSet) {if ('stampChange' === $oDTDBSet->get_sKey()) { $oDTDBSet->set_sValue(date('Y-m-d H:i:s')); }}
        },
    ],
    'mvc.db.model.db.construct.saveCache' => [
        /*
         * let create an openapi yaml file according to DB Table DataType Classes when the DataBase Tables setup changes
         */
        function() {
            // one-timer
            if (false === \MVC\Registry::isRegistered('DB::openapi'))
            {
                \MVC\Registry::set('DB::openapi', true);
                // generate /modules/{MODULE}/DataType/DTTables.yaml
                $sYamlFile = \MVC\DB\Model\Openapi::createDTYamlOnDTClasses(
                    // pass instance of your concrete DB Class
                    \{module}\Model\DB::init()
                );
            }
        },
    ],
]);

\MVC\Event::processBindConfigStack([

    'DT{module}ModelTableUser.set_password.before' => [
        /*
         * encrypt the transferred password
         */
        function(\MVC\DataType\DTValue $oDTValue){
            $oDTValue->set_mValue(
                password_hash(
                    $oDTValue->get_mValue(),
                    PASSWORD_DEFAULT
                )
            );
        },
    ],
]);

/*
 * log SQL Statements, if enabled via config
 */
if (true === \MVC\Config::get_MVC_LOG_SQL())
{
    \MVC\Event::processBindConfigStack([
        'mvc.db.model.db.create.sql' => array(function(MVC\ArrDot $oSql) {\MVC\Log::write($oSql->get('sSql'), \MVC\Config::get_MVC_LOG_FILE_SQL());}),
        'mvc.db.model.db.insert.sql' => array(function(MVC\ArrDot $oSql) {\MVC\Log::write($oSql->get('sSql'), \MVC\Config::get_MVC_LOG_FILE_SQL());}),
        'mvc.db.model.db.retrieve.sql' => array(function(MVC\ArrDot $oSql) {\MVC\Log::write($oSql->get('sSql'), \MVC\Config::get_MVC_LOG_FILE_SQL());}),
        'mvc.db.model.db.update.sql' => array(function(MVC\ArrDot $oSql) {\MVC\Log::write($oSql->get('sSql'), \MVC\Config::get_MVC_LOG_FILE_SQL());}),
        'mvc.db.model.db.delete.sql' => array(function(MVC\ArrDot $oSql) {\MVC\Log::write($oSql->get('sSql'), \MVC\Config::get_MVC_LOG_FILE_SQL());}),
        'mvc.db.model.db.createTable.sql' => array(function(MVC\ArrDot $oSql) {\MVC\Log::write($oSql->get('sSql'), \MVC\Config::get_MVC_LOG_FILE_SQL());}),
    ]);
}