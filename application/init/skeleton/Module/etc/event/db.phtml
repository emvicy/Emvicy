<?php

# List of Emvicy Standard Events
# @see https://emvicy.com/1.x/events#EmvicyStandardEvents


\MVC\Event::processBindConfigStack([

    'mvc.db.model.db.create.before' => [
        /*
         * add timestamps if missing
         */
        function(MVC\DB\DataType\DB\TableDataType $oTableDataType) {
            (true === empty($oTableDataType->get_stampCreate())) ? $oTableDataType->set_stampCreate(date('Y-m-d H:i:s')) : false;
            (true === empty($oTableDataType->get_stampChange())) ? $oTableDataType->set_stampChange(date('Y-m-d H:i:s')) : false;
        },
    ],
    'mvc.db.model.db.update.before' => [
        /*
         * set stampChange to current datetime
         */
        function(\MVC\DataType\DTValue $oDTValue) {
            /** @var \MVC\DataType\DTDBSet[] $aDTDBSet */
            $aDTDBSet = $oDTValue->get_mValue()['aDTDBSet'];
            /** @var \MVC\DataType\DTDBWhere[] $aDTDBWhere */
            $aDTDBWhere = $oDTValue->get_mValue()['aDTDBWhere'];
            foreach ($aDTDBSet as $oDTDBSet) {if ('stampChange' === $oDTDBSet->get_sKey()) { $oDTDBSet->set_sValue(date('Y-m-d H:i:s')); }}
        },
    ],
    'mvc.db.model.db.construct.saveCache' => [
        /*
         * let create an openapi yaml file according to DB Table DataType Classes when the DataBase Tables setup changes
         */
        function() {
            // one-timer
            if (false === \MVC\Registry::isRegistered('DB::openapi'))
            {
                \MVC\Registry::set('DB::openapi', true);
                // generate /modules/{MODULE}/DataType/DTTables.yaml
                $sYamlFile = \MVC\DB\Model\Openapi::createDTYamlOnDTClasses(
                    // pass instance of your concrete DB Class
                    \{module}\Model\DB::init()
                );
            }
        },
    ],
]);

\MVC\Event::processBindConfigStack([

    'DT{module}ModelTableUser.set_password.before' => [
        /*
         * encrypt the transferred password
         */
        function(\MVC\DataType\DTValue $oDTValue){
            $oDTValue->set_mValue(
                password_hash(
                    $oDTValue->get_mValue(),
                    PASSWORD_DEFAULT
                )
            );
        },
    ],

    'mvc.db.model.*.sql' => array(
        /*
         * log all SQL Statements, if enabled via config
         */
        function(string $sSql) {
            if (true === \MVC\Config::get_MVC_LOG_SQL())
            {
                \MVC\Log::write(
                    (int) \MVC\Config::get_MVC_LOG_SQL() . ', '
                    . \MVC\Strings::tidy($sSql),
                    \MVC\Config::get_MVC_LOG_FILE_SQL()
                );
            }
        }
    ),
]);